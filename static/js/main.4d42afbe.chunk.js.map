{"version":3,"sources":["reportWebVitals.js","assets/routes.ts","pages/basic/countries.ts","pages/basic/data.ts","assets/database.ts","pages/basic/fakeClient.ts","common/samplePage/view.tsx","pages/basic/view.tsx","pages/array/data.ts","pages/array/view.tsx","pages/standalone/view.tsx","pages/condition/data.ts","pages/condition/view.tsx","pages/inputs/data.tsx","pages/inputs/view.tsx","pages/radioCheckbox/data.tsx","pages/radioCheckbox/view.tsx","pages/textarea/data.tsx","pages/textarea/view.tsx","pages/dropdown/data.tsx","pages/dropdown/view.tsx","pages/attachment/data.tsx","pages/attachment/view.tsx","entry/view.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ROUTES","countries","text","value","config","onUpload","onRemove","fileUploadProgress","fileStatuses","headerText","onInfoIconClicked","alert","controlRows","width","ControlRowWidth","FULL","controls","type","FormControlType","INPUT","label","propertyPath","isRequired","validator","fieldValue","toLocaleLowerCase","startsWith","inputType","InputType","PASSWORD","EMAIL","NUMBER","growthRatio","DATE","dateType","DateType","DATE_ONLY","RADIO_GROUP","selections","DROPDOWN","options","placeholder","pinnedValues","showClearButton","MEDIUM_LARGE","TEXTAREA","characterLimit","ATTACHMENT","supportedFileExtensions","messageOverrides","supportedFileFormats","isMultiple","SMALL","MONEY","CHECKBOX_GROUP","PHONE","emptyModel","username","password","email","name","gender","fields","database","users","age","dob","Date","getTime","bio","targetAnnualSalary","phone","country","photoFilename","parties","venue","date","guests","useFakeClient","useState","setFileStatuses","progress","setProgress","numTimesUploadedTest","useRef","upload","files","id","setInterval","newProgressMap","forEach","f","currentProgress","current","split","toLowerCase","FileUploadStatus","FAILED","IN_PROGRESS","newProgress","undefined","UPLOADED","clearInterval","remove","filename","rest","SamplePage","props","submittedData","setSubmittedData","sampleDataToUse","setSampleDataToUse","className","description","sampleData","map","d","i","onClick","sampleDataName","icon","faCheck","renderForm","data","children","Basic","onSubmit","sections","defaultValues","formatRequiredLabels","validationMode","ValidationMode","BLUR","SUBMIT","scrollContainerSelector","isReadOnly","user","DATE_AND_TIME","earliestDate","isArray","parentPropertyPath","addEntryWhenEmpty","allowReordering","itemName","blankValues","ArraySample","party","StandaloneSample","showError","setShowError","TEXT","htmlProps","onChange","message","defaultValue","petType","breed","color","favFood","isHidden","isDisabled","layout","RadioLayout","GRID","ConditionalSample","isSubmitted","LOAD","disableSubmitWhenInvalid","hideErrorsOnLoad","registerLocale","es","salary","dateTime","time","rangedDate","rangedTime","minLength","maxLength","minValue","maxValue","currencyCode","TIME_ONLY","latestDate","addDays","isRanged","earliestTime","x","setHours","latestTime","MEDIUM","dateFormat","timeFormat","locale","InputsSample","submitButtonText","r1","r2","c1","c2","c3","c4","c5","c6","generateSelections","numSelections","Array","from","length","_","VERTICAL","numGridColumns","minNumSelections","maxNumSelections","RadioCheckboxSample","limit","resize1","resize2","resize3","md","md2","allowVerticalResize","allowHorizontalResize","useMarkdown","allowImageUpload","TextareaSample","basic","pinned","multi","multiClear","noFiltering","emptyText","ecn","DropdownSample","allowFiltering","saveSelection","onOptionSelected","option","emptyOptionsText","extraClassName","onOpen","onClose","onOptionsChanged","clientUpload","clientRemove","uploadIcon","faUpload","individualFileSizeLimit","totalFileSizeLimit","AttachmentSample","Entry","basename","to","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d42afbe.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const ROUTES = {\n  basic: '/overview',\n  array: '/array',\n  standalone: '/standalone',\n  conditional: '/conditional',\n  inputs: '/inputs',\n  radioCheckbox: '/radios-and-checkboxes',\n  textareas: '/textareas',\n  dropdowns: '/dropdowns',\n  attachments: '/attachments',\n}\n","import { DropdownOption } from '@nokacreative/generic-react-form'\n\nexport const countries: DropdownOption[] = [\n  { text: 'Afghanistan', value: 'AF' },\n  { text: 'Åland Islands', value: 'AX' },\n  { text: 'Albania', value: 'AL' },\n  { text: 'Algeria', value: 'DZ' },\n  { text: 'American Samoa', value: 'AS' },\n  { text: 'Andorra', value: 'AD' },\n  { text: 'Angola', value: 'AO' },\n  { text: 'Anguilla', value: 'AI' },\n  { text: 'Antarctica', value: 'AQ' },\n  { text: 'Antigua and Barbuda', value: 'AG' },\n  { text: 'Argentina', value: 'AR' },\n  { text: 'Armenia', value: 'AM' },\n  { text: 'Aruba', value: 'AW' },\n  { text: 'Australia', value: 'AU' },\n  { text: 'Austria', value: 'AT' },\n  { text: 'Azerbaijan', value: 'AZ' },\n  { text: 'Bahamas', value: 'BS' },\n  { text: 'Bahrain', value: 'BH' },\n  { text: 'Bangladesh', value: 'BD' },\n  { text: 'Barbados', value: 'BB' },\n  { text: 'Belarus', value: 'BY' },\n  { text: 'Belgium', value: 'BE' },\n  { text: 'Belize', value: 'BZ' },\n  { text: 'Benin', value: 'BJ' },\n  { text: 'Bermuda', value: 'BM' },\n  { text: 'Bhutan', value: 'BT' },\n  { text: 'Bolivia', value: 'BO' },\n  { text: 'Bosnia and Herzegovina', value: 'BA' },\n  { text: 'Botswana', value: 'BW' },\n  { text: 'Bouvet Island', value: 'BV' },\n  { text: 'Brazil', value: 'BR' },\n  { text: 'British Indian Ocean Territory', value: 'IO' },\n  { text: 'Brunei Darussalam', value: 'BN' },\n  { text: 'Bulgaria', value: 'BG' },\n  { text: 'Burkina Faso', value: 'BF' },\n  { text: 'Burundi', value: 'BI' },\n  { text: 'Cambodia', value: 'KH' },\n  { text: 'Cameroon', value: 'CM' },\n  { text: 'Canada', value: 'CA' },\n  { text: 'Cape Verde', value: 'CV' },\n  { text: 'Cayman Islands', value: 'KY' },\n  { text: 'Central African Republic', value: 'CF' },\n  { text: 'Chad', value: 'TD' },\n  { text: 'Chile', value: 'CL' },\n  { text: 'China', value: 'CN' },\n  { text: 'Christmas Island', value: 'CX' },\n  { text: 'Cocos (Keeling) Islands', value: 'CC' },\n  { text: 'Colombia', value: 'CO' },\n  { text: 'Comoros', value: 'KM' },\n  { text: 'Congo', value: 'CG' },\n  { text: 'Congo, The Democratic Republic of the', value: 'CD' },\n  { text: 'Cook Islands', value: 'CK' },\n  { text: 'Costa Rica', value: 'CR' },\n  { text: \"Cote D'Ivoire\", value: 'CI' },\n  { text: 'Croatia', value: 'HR' },\n  { text: 'Cuba', value: 'CU' },\n  { text: 'Cyprus', value: 'CY' },\n  { text: 'Czech Republic', value: 'CZ' },\n  { text: 'Denmark', value: 'DK' },\n  { text: 'Djibouti', value: 'DJ' },\n  { text: 'Dominica', value: 'DM' },\n  { text: 'Dominican Republic', value: 'DO' },\n  { text: 'Ecuador', value: 'EC' },\n  { text: 'Egypt', value: 'EG' },\n  { text: 'El Salvador', value: 'SV' },\n  { text: 'Equatorial Guinea', value: 'GQ' },\n  { text: 'Eritrea', value: 'ER' },\n  { text: 'Estonia', value: 'EE' },\n  { text: 'Ethiopia', value: 'ET' },\n  { text: 'Falkland Islands (Malvinas)', value: 'FK' },\n  { text: 'Faroe Islands', value: 'FO' },\n  { text: 'Fiji', value: 'FJ' },\n  { text: 'Finland', value: 'FI' },\n  { text: 'France', value: 'FR' },\n  { text: 'French Guiana', value: 'GF' },\n  { text: 'French Polynesia', value: 'PF' },\n  { text: 'French Southern Territories', value: 'TF' },\n  { text: 'Gabon', value: 'GA' },\n  { text: 'Gambia', value: 'GM' },\n  { text: 'Georgia', value: 'GE' },\n  { text: 'Germany', value: 'DE' },\n  { text: 'Ghana', value: 'GH' },\n  { text: 'Gibraltar', value: 'GI' },\n  { text: 'Greece', value: 'GR' },\n  { text: 'Greenland', value: 'GL' },\n  { text: 'Grenada', value: 'GD' },\n  { text: 'Guadeloupe', value: 'GP' },\n  { text: 'Guam', value: 'GU' },\n  { text: 'Guatemala', value: 'GT' },\n  { text: 'Guernsey', value: 'GG' },\n  { text: 'Guinea', value: 'GN' },\n  { text: 'Guinea-Bissau', value: 'GW' },\n  { text: 'Guyana', value: 'GY' },\n  { text: 'Haiti', value: 'HT' },\n  { text: 'Heard Island and Mcdonald Islands', value: 'HM' },\n  { text: 'Holy See (Vatican City State)', value: 'VA' },\n  { text: 'Honduras', value: 'HN' },\n  { text: 'Hong Kong', value: 'HK' },\n  { text: 'Hungary', value: 'HU' },\n  { text: 'Iceland', value: 'IS' },\n  { text: 'India', value: 'IN' },\n  { text: 'Indonesia', value: 'ID' },\n  { text: 'Iran, Islamic Republic Of', value: 'IR' },\n  { text: 'Iraq', value: 'IQ' },\n  { text: 'Ireland', value: 'IE' },\n  { text: 'Isle of Man', value: 'IM' },\n  { text: 'Israel', value: 'IL' },\n  { text: 'Italy', value: 'IT' },\n  { text: 'Jamaica', value: 'JM' },\n  { text: 'Japan', value: 'JP' },\n  { text: 'Jersey', value: 'JE' },\n  { text: 'Jordan', value: 'JO' },\n  { text: 'Kazakhstan', value: 'KZ' },\n  { text: 'Kenya', value: 'KE' },\n  { text: 'Kiribati', value: 'KI' },\n  { text: \"Korea, Democratic People'S Republic of\", value: 'KP' },\n  { text: 'Korea, Republic of', value: 'KR' },\n  { text: 'Kuwait', value: 'KW' },\n  { text: 'Kyrgyzstan', value: 'KG' },\n  { text: \"Lao People'S Democratic Republic\", value: 'LA' },\n  { text: 'Latvia', value: 'LV' },\n  { text: 'Lebanon', value: 'LB' },\n  { text: 'Lesotho', value: 'LS' },\n  { text: 'Liberia', value: 'LR' },\n  { text: 'Libyan Arab Jamahiriya', value: 'LY' },\n  { text: 'Liechtenstein', value: 'LI' },\n  { text: 'Lithuania', value: 'LT' },\n  { text: 'Luxembourg', value: 'LU' },\n  { text: 'Macao', value: 'MO' },\n  { text: 'Macedonia, The Former Yugoslav Republic of', value: 'MK' },\n  { text: 'Madagascar', value: 'MG' },\n  { text: 'Malawi', value: 'MW' },\n  { text: 'Malaysia', value: 'MY' },\n  { text: 'Maldives', value: 'MV' },\n  { text: 'Mali', value: 'ML' },\n  { text: 'Malta', value: 'MT' },\n  { text: 'Marshall Islands', value: 'MH' },\n  { text: 'Martinique', value: 'MQ' },\n  { text: 'Mauritania', value: 'MR' },\n  { text: 'Mauritius', value: 'MU' },\n  { text: 'Mayotte', value: 'YT' },\n  { text: 'Mexico', value: 'MX' },\n  { text: 'Micronesia, Federated States of', value: 'FM' },\n  { text: 'Moldova, Republic of', value: 'MD' },\n  { text: 'Monaco', value: 'MC' },\n  { text: 'Mongolia', value: 'MN' },\n  { text: 'Montserrat', value: 'MS' },\n  { text: 'Morocco', value: 'MA' },\n  { text: 'Mozambique', value: 'MZ' },\n  { text: 'Myanmar', value: 'MM' },\n  { text: 'Namibia', value: 'NA' },\n  { text: 'Nauru', value: 'NR' },\n  { text: 'Nepal', value: 'NP' },\n  { text: 'Netherlands', value: 'NL' },\n  { text: 'Netherlands Antilles', value: 'AN' },\n  { text: 'New Caledonia', value: 'NC' },\n  { text: 'New Zealand', value: 'NZ' },\n  { text: 'Nicaragua', value: 'NI' },\n  { text: 'Niger', value: 'NE' },\n  { text: 'Nigeria', value: 'NG' },\n  { text: 'Niue', value: 'NU' },\n  { text: 'Norfolk Island', value: 'NF' },\n  { text: 'Northern Mariana Islands', value: 'MP' },\n  { text: 'Norway', value: 'NO' },\n  { text: 'Oman', value: 'OM' },\n  { text: 'Pakistan', value: 'PK' },\n  { text: 'Palau', value: 'PW' },\n  { text: 'Palestinian Territory, Occupied', value: 'PS' },\n  { text: 'Panama', value: 'PA' },\n  { text: 'Papua New Guinea', value: 'PG' },\n  { text: 'Paraguay', value: 'PY' },\n  { text: 'Peru', value: 'PE' },\n  { text: 'Philippines', value: 'PH' },\n  { text: 'Pitcairn', value: 'PN' },\n  { text: 'Poland', value: 'PL' },\n  { text: 'Portugal', value: 'PT' },\n  { text: 'Puerto Rico', value: 'PR' },\n  { text: 'Qatar', value: 'QA' },\n  { text: 'Reunion', value: 'RE' },\n  { text: 'Romania', value: 'RO' },\n  { text: 'Russian Federation', value: 'RU' },\n  { text: 'RWANDA', value: 'RW' },\n  { text: 'Saint Helena', value: 'SH' },\n  { text: 'Saint Kitts and Nevis', value: 'KN' },\n  { text: 'Saint Lucia', value: 'LC' },\n  { text: 'Saint Pierre and Miquelon', value: 'PM' },\n  { text: 'Saint Vincent and the Grenadines', value: 'VC' },\n  { text: 'Samoa', value: 'WS' },\n  { text: 'San Marino', value: 'SM' },\n  { text: 'Sao Tome and Principe', value: 'ST' },\n  { text: 'Saudi Arabia', value: 'SA' },\n  { text: 'Senegal', value: 'SN' },\n  { text: 'Serbia and Montenegro', value: 'CS' },\n  { text: 'Seychelles', value: 'SC' },\n  { text: 'Sierra Leone', value: 'SL' },\n  { text: 'Singapore', value: 'SG' },\n  { text: 'Slovakia', value: 'SK' },\n  { text: 'Slovenia', value: 'SI' },\n  { text: 'Solomon Islands', value: 'SB' },\n  { text: 'Somalia', value: 'SO' },\n  { text: 'South Africa', value: 'ZA' },\n  { text: 'South Georgia and the South Sandwich Islands', value: 'GS' },\n  { text: 'Spain', value: 'ES' },\n  { text: 'Sri Lanka', value: 'LK' },\n  { text: 'Sudan', value: 'SD' },\n  { text: 'Suriname', value: 'SR' },\n  { text: 'Svalbard and Jan Mayen', value: 'SJ' },\n  { text: 'Swaziland', value: 'SZ' },\n  { text: 'Sweden', value: 'SE' },\n  { text: 'Switzerland', value: 'CH' },\n  { text: 'Syrian Arab Republic', value: 'SY' },\n  { text: 'Taiwan, Province of China', value: 'TW' },\n  { text: 'Tajikistan', value: 'TJ' },\n  { text: 'Tanzania, United Republic of', value: 'TZ' },\n  { text: 'Thailand', value: 'TH' },\n  { text: 'Timor-Leste', value: 'TL' },\n  { text: 'Togo', value: 'TG' },\n  { text: 'Tokelau', value: 'TK' },\n  { text: 'Tonga', value: 'TO' },\n  { text: 'Trinidad and Tobago', value: 'TT' },\n  { text: 'Tunisia', value: 'TN' },\n  { text: 'Turkey', value: 'TR' },\n  { text: 'Turkmenistan', value: 'TM' },\n  { text: 'Turks and Caicos Islands', value: 'TC' },\n  { text: 'Tuvalu', value: 'TV' },\n  { text: 'Uganda', value: 'UG' },\n  { text: 'Ukraine', value: 'UA' },\n  { text: 'United Arab Emirates', value: 'AE' },\n  { text: 'United Kingdom', value: 'GB' },\n  { text: 'United States', value: 'US' },\n  { text: 'United States Minor Outlying Islands', value: 'UM' },\n  { text: 'Uruguay', value: 'UY' },\n  { text: 'Uzbekistan', value: 'UZ' },\n  { text: 'Vanuatu', value: 'VU' },\n  { text: 'Venezuela', value: 'VE' },\n  { text: 'Viet Nam', value: 'VN' },\n  { text: 'Virgin Islands, British', value: 'VG' },\n  { text: 'Virgin Islands, U.S.', value: 'VI' },\n  { text: 'Wallis and Futuna', value: 'WF' },\n  { text: 'Western Sahara', value: 'EH' },\n  { text: 'Yemen', value: 'YE' },\n  { text: 'Zambia', value: 'ZM' },\n  { text: 'Zimbabwe', value: 'ZW' },\n]\n","import { FormSectionConfig, ControlRowWidth, FormControlType, DateType, FileUploadStatus, InputType } from '@nokacreative/generic-react-form'\nimport { UserModel } from '../../domain/user.model'\nimport { countries } from './countries'\n\nexport const config = (\n  onUpload: (files: File[]) => void,\n  onRemove: (filename: string, index: number) => void,\n  fileUploadProgress: { [filename: string]: number },\n  fileStatuses: { [filename: string]: FileUploadStatus }\n): FormSectionConfig<UserModel>[] => {\n  return [\n    {\n      headerText: 'Login Details',\n      onInfoIconClicked: () =>\n        alert(\n          \"You can open up a modal or tooltip here. It's also available next to specific fields, like 'Bio' in this sample.\"\n        ),\n      controlRows: [\n        {\n          width: ControlRowWidth.FULL,\n          controls: [\n            {\n              type: FormControlType.INPUT,\n              label: 'Username',\n              propertyPath: 'username',\n              isRequired: true,\n              validator: (fieldValue: string) => {\n                if (fieldValue.toLocaleLowerCase().startsWith('a')) {\n                  return \"Cannot start with 'a'.\"\n                }\n              },\n            },\n            {\n              type: FormControlType.INPUT,\n              label: 'Password',\n              propertyPath: 'password',\n              inputType: InputType.PASSWORD,\n              isRequired: true,\n            },\n            {\n              type: FormControlType.INPUT,\n              label: 'Email',\n              propertyPath: 'email',\n              inputType: InputType.EMAIL,\n              isRequired: true,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      headerText: 'Profile',\n      controlRows: [\n        {\n          controls: [\n            {\n              type: FormControlType.INPUT,\n              label: 'Name',\n              propertyPath: 'name',\n              isRequired: true,\n            },\n            {\n              type: FormControlType.INPUT,\n              label: 'Age',\n              propertyPath: 'age',\n              inputType: InputType.NUMBER,\n              growthRatio: 0.3,\n            },\n            {\n              type: FormControlType.INPUT,\n              label: 'Date of birth',\n              propertyPath: 'dob',\n              inputType: InputType.DATE,\n              dateType: DateType.DATE_ONLY,\n              growthRatio: 0.64,\n            },\n          ],\n        },\n        {\n          controls: [\n            {\n              type: FormControlType.RADIO_GROUP,\n              label: 'Gender',\n              propertyPath: 'gender',\n              selections: [\n                { value: 'male', text: 'Male' },\n                { value: 'female', text: 'Female' },\n                { value: 'other', text: 'Other' },\n              ],\n            },\n            {\n              type: FormControlType.DROPDOWN,\n              label: 'Country',\n              propertyPath: 'country',\n              options: countries,\n              placeholder: 'Select',\n              pinnedValues: ['CA', 'US'],\n              showClearButton: true,\n            },\n          ],\n        },\n        {\n          width: ControlRowWidth.MEDIUM_LARGE,\n          controls: [\n            {\n              type: FormControlType.TEXTAREA,\n              label: 'Bio',\n              propertyPath: 'bio',\n              characterLimit: 300,\n              onInfoIconClicked: () =>\n                alert(\n                  \"You can open up a modal or tooltip here. It's also available next to section headers.\"\n                ),\n            },\n          ],\n        },\n        {\n          controls: [\n            {\n              type: FormControlType.ATTACHMENT,\n              label: 'Photo',\n              propertyPath: 'photoFilename',\n              supportedFileExtensions: ['png', 'jpg', 'bmp'],\n              onUpload,\n              onRemove,\n              messageOverrides: {\n                supportedFileFormats: 'Supported file formats: Image Files',\n              },\n              fileUploadProgress,\n              fileStatuses,\n              isMultiple: true,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      headerText: 'Job Search Details',\n      controlRows: [\n        {\n          width: ControlRowWidth.SMALL,\n          controls: [\n            {\n              type: FormControlType.INPUT,\n              label: 'Target Annual Salary',\n              propertyPath: 'targetAnnualSalary',\n              inputType: InputType.MONEY,\n              isRequired: true,\n            },\n          ],\n        },\n        {\n          controls: [\n            {\n              type: FormControlType.CHECKBOX_GROUP,\n              label: 'Fields',\n              propertyPath: 'fields',\n              isRequired: true,\n              selections: [\n                { value: 'engineering', text: 'Engineering' },\n                { value: 'architecture', text: 'Architecture' },\n                { value: 'art', text: 'Art' },\n              ],\n            },\n          ],\n        },\n        {\n          width: ControlRowWidth.SMALL,\n          controls: [\n            {\n              type: FormControlType.INPUT,\n              label: 'Phone Number',\n              propertyPath: 'phone',\n              isRequired: true,\n              inputType: InputType.PHONE,\n            },\n          ],\n        },\n      ],\n    },\n  ]\n}\n\n// @ts-expect-error\nexport const emptyModel: UserModel = {\n  username: '',\n  password: '',\n  email: '',\n  name: '',\n  gender: 'male',\n  fields: [],\n}\n","import { PartyModel } from '../domain/party.model'\nimport { UserModel } from '../domain/user.model'\n\n// Fake document DB\nexport interface Database {\n  users: UserModel[]\n  parties: PartyModel[]\n}\n\nexport const database: Database = {\n  users: [\n    {\n      username: 'user1',\n      password: 'asdf@#3',\n      email: 'user.1@asdf.com',\n      name: 'User 1',\n      age: 20,\n      gender: 'male',\n      dob: new Date(2001, 5, 1).getTime(),\n      bio: 'Hi',\n      targetAnnualSalary: 1300000,\n      fields: ['engineering'],\n      phone: '123-456-7890',\n      country: 'CA',\n      photoFilename: 'photo.jpg',\n    },\n    {\n      username: 'user2',\n      password: 'A1B2C3',\n      email: 'second-user@fgsg.com',\n      name: 'User 2',\n      age: 30,\n      gender: 'female',\n      dob: new Date(1991, 8, 30).getTime(),\n      bio: 'Hurray',\n      targetAnnualSalary: 9000000000,\n      fields: ['architecture', 'art'],\n      phone: '000-000-0000',\n      country: 'US',\n    },\n  ],\n  parties: [\n    {\n      venue: 'Some Place',\n      date: new Date().getTime(),\n      guests: [\n        { name: 'Person 1', email: 'person1@email.com' },\n        { name: 'Person 2', email: 'person2@email.com' },\n      ],\n    },\n  ],\n}\n","import { useRef, useState } from 'react'\nimport { FileUploadStatus } from '@nokacreative/generic-react-form'\n\nexport function useFakeClient() {\n  const [fileStatuses, setFileStatuses] = useState<{\n    [filename: string]: FileUploadStatus\n  }>({})\n  const [progress, setProgress] = useState<{ [filename: string]: number }>({})\n  const numTimesUploadedTest = useRef<number>(0)\n\n  function upload(files: File[]) {\n    const id = setInterval(() => {\n      setProgress((progress: { [filename: string]: number }) => {\n        const newProgressMap = { ...progress }\n        files.forEach((f) => {\n          const currentProgress = newProgressMap[f.name]\n          if (\n            numTimesUploadedTest.current <= 2 &&\n            f.name.split('.')[0].toLowerCase() === 'test'\n          ) {\n            if (currentProgress === 40) {\n              setFileStatuses({\n                ...fileStatuses,\n                [f.name]: FileUploadStatus.FAILED,\n              })\n              newProgressMap[f.name] = 0\n              numTimesUploadedTest.current += 1\n              return\n            }\n            if (fileStatuses[f.name] === FileUploadStatus.FAILED) {\n              setFileStatuses({\n                ...fileStatuses,\n                [f.name]: FileUploadStatus.IN_PROGRESS,\n              })\n              numTimesUploadedTest.current += 1\n              return\n            }\n          }\n          let newProgress = 100\n          if (currentProgress === undefined) {\n            newProgress = 0\n            setFileStatuses({\n              ...fileStatuses,\n              [f.name]: FileUploadStatus.IN_PROGRESS,\n            })\n          } else if (currentProgress < 100) {\n            newProgress = currentProgress + 20\n          } else {\n            setFileStatuses({\n              ...fileStatuses,\n              [f.name]: FileUploadStatus.UPLOADED,\n            })\n            clearInterval(id)\n          }\n          newProgressMap[f.name] = newProgress\n        })\n        return newProgressMap\n      })\n    }, 500)\n  }\n\n  function remove(filename: string) {\n    const { [filename]: _, ...rest } = fileStatuses\n    setFileStatuses(rest)\n  }\n\n  return { upload, remove, fileStatuses, progress }\n}\n","import React, { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\n\nimport './styles.scss'\n\ntype Props<T> = {\n  headerText: string\n  description: React.ReactNode\n  children?: React.ReactNode\n  renderForm?: (\n    onSubmit: (data: T) => void,\n    submittedData: T | undefined,\n    sampleDataToUse: T | undefined\n  ) => React.ReactNode\n  sampleData?: T[]\n  sampleDataName?: (data: T) => string\n}\n\nexport function SamplePage<T>(props: Props<T>) {\n  const [submittedData, setSubmittedData] = useState<T>()\n  const [sampleDataToUse, setSampleDataToUse] = useState<T>()\n  return (\n    <article className=\"sample-page\">\n      <h1>{props.headerText}</h1>\n      <div className=\"description\">\n        {props.description}\n        {props.sampleData && (\n          <section className=\"sample-data-section\">\n            <p>Check out some sample data:</p>\n            {props.sampleData.map((d, i) => (\n              <button\n                type=\"button\"\n                className=\"sample-selection\"\n                key={`sample-data-${i}`}\n                onClick={() => setSampleDataToUse(d)}\n              >\n                {(props.sampleDataName as Function)(d)}\n              </button>\n            ))}\n          </section>\n        )}\n      </div>\n\n      {submittedData && (\n        <div className=\"banner\">\n          <FontAwesomeIcon icon={faCheck} />\n          <span>Submitted!</span>\n        </div>\n      )}\n      {props.renderForm &&\n        props.renderForm(\n          (data: T) => setSubmittedData(data),\n          submittedData,\n          sampleDataToUse\n        )}\n      {props.children}\n    </article>\n  )\n}\n","import { Form, ValidationMode } from '@nokacreative/generic-react-form'\nimport './styles.scss'\n\nimport { config, emptyModel } from './data'\nimport { database } from '../../assets/database'\nimport { useFakeClient } from './fakeClient'\nimport { SamplePage } from '../../common/samplePage'\nimport { UserModel } from '../../domain/user.model'\n\nexport const Basic = () => {\n  const { upload, remove, fileStatuses, progress } = useFakeClient()\n\n  return (\n    <SamplePage\n      headerText=\"Overview\"\n      description={\n        <>\n          <p>\n            An overview of all the control types and some configuration offered by this\n            package.\n          </p>\n          <p>\n            In this particular sample, all fields marked with a red asterisk are required.\n          </p>\n        </>\n      }\n      renderForm={(\n        onSubmit: (data: UserModel) => void,\n        submittedData: UserModel | undefined,\n        sampleDataToUse: UserModel | undefined\n      ) => (\n        <Form\n          sections={config(upload, remove, progress, fileStatuses)}\n          defaultValues={sampleDataToUse || submittedData || emptyModel}\n          onSubmit={onSubmit}\n          formatRequiredLabels={(label: string) => (\n            <>\n              <span className=\"required-asterisk\">*</span>\n              {label}\n            </>\n          )}\n          validationMode={ValidationMode.BLUR | ValidationMode.SUBMIT}\n          scrollContainerSelector=\"main\"\n          isReadOnly={submittedData !== undefined}\n        />\n      )}\n      sampleData={database.users}\n      sampleDataName={(user: UserModel) => user.name}\n    />\n  )\n}\n","import {\n  FormSectionConfig,\n  ControlRowWidth,\n  FormControlType,\n  DateType,\n  InputType,\n} from '@nokacreative/generic-react-form'\nimport { PartyModel } from '../../domain/party.model'\n\nexport const emptyModel: PartyModel = {\n  venue: '',\n  date: new Date().getTime(),\n  guests: [\n    {\n      name: '',\n      email: '',\n    },\n  ],\n}\n\nexport const config: FormSectionConfig<PartyModel>[] = [\n  {\n    headerText: 'Booking Details',\n    controlRows: [\n      {\n        width: ControlRowWidth.FULL,\n        controls: [\n          {\n            type: FormControlType.INPUT,\n            label: 'Venue Name',\n            propertyPath: 'venue',\n            isRequired: true,\n          },\n          {\n            type: FormControlType.INPUT,\n            label: 'Date',\n            propertyPath: 'date',\n            inputType: InputType.DATE,\n            dateType: DateType.DATE_AND_TIME,\n            earliestDate: new Date(),\n          },\n        ],\n      },\n    ],\n  },\n  {\n    headerText: 'Guests to invite',\n    isArray: true,\n    parentPropertyPath: 'guests',\n    addEntryWhenEmpty: true,\n    allowReordering: true,\n    itemName: 'Guest',\n    blankValues: emptyModel.guests,\n    controlRows: [\n      {\n        width: ControlRowWidth.FULL,\n        controls: [\n          {\n            type: FormControlType.INPUT,\n            label: 'Name',\n            propertyPath: 'name',\n            isRequired: true,\n          },\n          {\n            type: FormControlType.INPUT,\n            label: 'Email',\n            propertyPath: 'email',\n            inputType: InputType.EMAIL,\n          },\n        ],\n      },\n    ],\n  },\n]\n","import React from 'react'\nimport { Form, ValidationMode } from '@nokacreative/generic-react-form'\n\nimport { config, emptyModel } from './data'\nimport { database } from '../../assets/database'\nimport { SamplePage } from '../../common/samplePage'\nimport { PartyModel } from '../../domain/party.model'\n\nexport const ArraySample = () => (\n  <SamplePage\n    headerText=\"Arrays\"\n    description={\n      <>\n        The array section in this form is the <em>Guests to invite</em> section. Array\n        entries can be added, removed, with the following optional functionality:\n        <ul>\n          <li>Allow entries to be reordered</li>\n          <li>Add an empty entry when the last one is removed</li>\n          <li>\n            Specification of a name for each entry (&quot;Guest&quot; in this sample)\n          </li>\n        </ul>\n      </>\n    }\n    renderForm={(\n      onSubmit: (data: PartyModel) => void,\n      submittedData: PartyModel | undefined,\n      sampleDataToUse: PartyModel | undefined\n    ) => (\n      <Form\n        sections={config}\n        defaultValues={sampleDataToUse || submittedData || emptyModel}\n        onSubmit={onSubmit}\n        validationMode={ValidationMode.BLUR}\n        scrollContainerSelector=\"main\"\n        isReadOnly={submittedData !== undefined}\n      />\n    )}\n    sampleData={database.parties}\n    sampleDataName={(party: PartyModel) => party.venue}\n  />\n)\n","import { useState } from 'react'\nimport './styles.scss'\n\nimport { SamplePage } from '../../common/samplePage'\nimport {\n  DateInput,\n  DateType,\n  Input,\n  InputType,\n  Checkbox,\n  Radio,\n  Dropdown,\n  InlineError,\n} from '@nokacreative/generic-react-form'\n\nexport const StandaloneSample = () => {\n  const [showError, setShowError] = useState<boolean>(false)\n\n  return (\n    <SamplePage\n      headerText=\"Standalone Controls\"\n      description=\"All controls, including error messages, can be used independently, outside of forms.\"\n    >\n      <label>Text Input</label>\n      <Input\n        type={InputType.TEXT}\n        htmlProps={{ placeholder: 'Type \"hello\" to see something happen!' }}\n        onChange={(value: string) => {\n          setShowError(value === 'hello')\n        }}\n      />\n      {showError && <InlineError message=\"Something happened\" />}\n\n      <label>Date Input</label>\n      <DateInput\n        dateType={DateType.DATE_AND_TIME}\n        onChange={() => {\n          /* Skip */\n        }}\n      />\n\n      <br />\n      <p>Select your desired option:</p>\n      <Dropdown\n        options={[\n          { value: 'a', text: 'None of these' },\n          { value: 'b', text: 'Sample Controls' },\n          { value: 'c', text: 'Will do anything' },\n          { value: 'd', text: 'FYI' },\n        ]}\n        id=\"standalone-dropdown\"\n        defaultValue=\"a\"\n      />\n\n      <br />\n      <p>Agree to our terms and conditions:</p>\n      <Checkbox label=\"Sure\" />\n\n      <br />\n      <p>View this page in:</p>\n      <Radio label=\"Normal mode\" name=\"pageMode\" value=\"normal\" />\n      <Radio label=\"Compact mode\" name=\"pageMode\" value=\"compact\" />\n    </SamplePage>\n  )\n}\n","import {\n  FormSectionConfig,\n  ControlRowWidth,\n  FormControlType,\n  RadioLayout,\n  InputType,\n} from '@nokacreative/generic-react-form'\nimport { TestModel } from './model'\n\nexport const emptyModel: TestModel = {\n  petType: '',\n  breed: '',\n  color: [],\n  age: 0,\n  favFood: 'Nothing when under 1',\n}\n\nexport const config: FormSectionConfig<TestModel>[] = [\n  {\n    headerText: 'I am looking for a...',\n    controlRows: [\n      {\n        width: ControlRowWidth.FULL,\n        controls: [\n          {\n            type: FormControlType.RADIO_GROUP,\n            label: undefined,\n            propertyPath: 'petType',\n            isRequired: true,\n            selections: [\n              { value: 'dog', text: 'Dog' },\n              { value: 'cat', text: 'Cat' },\n              { value: 'turtle', text: 'Turtle' },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    headerText: 'Dog details',\n    isHidden: (data: TestModel) => data.petType !== 'dog',\n    controlRows: [\n      {\n        controls: [\n          {\n            type: FormControlType.CHECKBOX_GROUP,\n            label: \"We don't have those\",\n            propertyPath: 'noDogs',\n            selections: [{ value: true, text: 'OK' }],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    headerText: 'Cat details',\n    isHidden: (data: TestModel) => data.petType !== 'cat',\n    controlRows: [\n      {\n        width: ControlRowWidth.MEDIUM_LARGE,\n        controls: [\n          {\n            type: FormControlType.DROPDOWN,\n            label: 'Breed',\n            propertyPath: 'breed',\n            placeholder: 'Choose...',\n            options: [\n              {\n                text: \"I don't\",\n                value: 'a',\n              },\n              {\n                text: 'actually know',\n                value: 'b',\n              },\n              {\n                text: 'any cat breeds',\n                value: 'c',\n              },\n              {\n                text: 'but this one is colourless',\n                value: 'd',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        controls: [\n          {\n            type: FormControlType.CHECKBOX_GROUP,\n            label: 'Colour',\n            propertyPath: 'color',\n            isDisabled: (data: TestModel) => data.breed === 'd',\n            selections: [\n              { value: 'black', text: 'Black' },\n              { value: 'white', text: 'White' },\n              { value: 'gray', text: 'Gray' },\n              { value: 'brown', text: 'Brown' },\n              { value: 'orange', text: 'Orange' },\n              { value: 'yellow', text: 'Yellow' },\n            ],\n            layout: RadioLayout.GRID,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    headerText: 'Turtle details',\n    isHidden: (data: TestModel) => data.petType !== 'turtle',\n    controlRows: [\n      {\n        controls: [\n          {\n            type: FormControlType.INPUT,\n            inputType: InputType.NUMBER,\n            label: 'Age',\n            propertyPath: 'age',\n            growthRatio: 0.5,\n          },\n          {\n            type: FormControlType.INPUT,\n            label: 'Favourite food',\n            propertyPath: 'favFood',\n            isReadOnly: (data: TestModel) => data.age < 1,\n          },\n        ],\n      },\n    ],\n  },\n]\n","import React from 'react'\nimport { Form, ValidationMode } from '@nokacreative/generic-react-form'\n\nimport { config, emptyModel } from './data'\nimport { SamplePage } from '../../common/samplePage'\nimport { TestModel } from './model'\n\nexport const ConditionalSample = () => (\n  <SamplePage\n    headerText=\"Conditional configurations\"\n    description={\n      <>\n        <p>\n          All sections and individual fields can be toggled dynamically based off the\n          current form data in the following ways:\n        </p>\n        <ul>\n          <li>Show or Hide</li>\n          <li>Make required or not required</li>\n          <li>Disable or enable</li>\n          <li>Make read-only or not</li>\n        </ul>\n        <p>\n          Note that the most specific setting will be used. For example, if the entire\n          form is set to read-only, but a specific section or field sets{' '}\n          <code>isReadOnly: false</code>, then only that section or field will not be\n          read-only.\n        </p>\n        <p>\n          This is demonstrated here with the <em>Favourite food</em> field under the{' '}\n          <em>Turtle</em> selection: if you set the age to anything over 0, the field will\n          be enabled. On submission, the form is set to read-only, but the condition for\n          enabling the field still holds true, thus causing it to still be enabled.\n          <br />\n          <span className=\"footnote\">\n            (Note: To get around this, the configuration should include checks for whether\n            or not the form was submitted.)\n          </span>\n        </p>\n        <p>\n          The exception to this is for hidden sections, which will not render (and thus go\n          through and check) any of its fields for optimization; thus, a section marked as\n          hidden with one specific field set to <code>isHidden: false</code> will still be\n          entirely hidden.\n        </p>\n      </>\n    }\n    renderForm={(\n      onSubmit: (data: TestModel) => void,\n      submittedData: TestModel | undefined,\n      sampleDataToUse: TestModel | undefined\n    ) => {\n      const isSubmitted = submittedData !== undefined\n      return (\n        <Form\n          sections={config}\n          defaultValues={sampleDataToUse || submittedData || emptyModel}\n          onSubmit={onSubmit}\n          validationMode={\n            ValidationMode.LOAD | ValidationMode.BLUR | ValidationMode.SUBMIT\n          }\n          scrollContainerSelector=\"main\"\n          isReadOnly={isSubmitted}\n          disableSubmitWhenInvalid\n          hideErrorsOnLoad\n        />\n      )\n    }}\n  />\n)\n","import addDays from 'date-fns/addDays'\nimport { registerLocale } from 'react-datepicker'\nimport es from 'date-fns/locale/es'\n\nimport {\n  FormSectionConfig,\n  FormControlType,\n  ControlRowWidth,\n  DateType,\n  InputType,\n} from '@nokacreative/generic-react-form'\nimport { TestModel } from './model'\n\nregisterLocale('es', es)\n\nexport const emptyModel: TestModel = {\n  name: '',\n  phone: '',\n  email: '',\n  age: 0,\n  salary: 500,\n  dateTime: new Date().getTime(),\n  date: new Date().getTime(),\n  time: new Date().getTime(),\n  rangedDate: [],\n  rangedTime: [],\n}\n\nexport const config: FormSectionConfig<TestModel>[] = [\n  {\n    headerText: 'Standard Inputs',\n    controlRows: [\n      {\n        controls: [\n          {\n            type: FormControlType.INPUT,\n            label: 'Text',\n            propertyPath: 'name',\n            placeholder: 'Placeholder',\n            minLength: 3,\n            maxLength: 10,\n            description: (\n              <span>\n                Between 3 and 10 characters (<b>minLength</b> and <b>maxLength</b>)\n              </span>\n            ),\n          },\n          {\n            type: FormControlType.INPUT,\n            label: 'Number',\n            propertyPath: 'age',\n            inputType: InputType.NUMBER,\n            minValue: 20,\n            maxValue: 50,\n            description: (\n              <span>\n                Between 20 and 50 characters (<b>minValue</b> and <b>maxValue</b>)\n              </span>\n            ),\n          },\n        ],\n      },\n      {\n        controls: [\n          {\n            type: FormControlType.INPUT,\n            label: 'Email',\n            propertyPath: 'email',\n            inputType: InputType.EMAIL,\n            description: 'Automatically validates when required',\n            isRequired: true,\n          },\n          {\n            type: FormControlType.INPUT,\n            label: 'Phone',\n            propertyPath: 'phone',\n            inputType: InputType.PHONE,\n            description: 'Automatically validates when required',\n            isRequired: true,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    headerText: 'Special Inputs',\n    controlRows: [\n      {\n        width: ControlRowWidth.SMALL,\n        controls: [\n          {\n            type: FormControlType.INPUT,\n            label: 'Money',\n            propertyPath: 'salary',\n            inputType: InputType.MONEY,\n            currencyCode: 'JPY',\n            description: 'Can specify currency code',\n          },\n        ],\n      },\n      {\n        controls: [\n          {\n            type: FormControlType.INPUT,\n            label: 'Date and Time',\n            propertyPath: 'date',\n            inputType: InputType.DATE,\n            dateType: DateType.DATE_AND_TIME,\n          },\n          {\n            type: FormControlType.INPUT,\n            label: 'Date Only',\n            propertyPath: 'date',\n            inputType: InputType.DATE,\n            dateType: DateType.DATE_ONLY,\n          },\n          {\n            type: FormControlType.INPUT,\n            label: 'Time Only',\n            propertyPath: 'time',\n            inputType: InputType.DATE,\n            dateType: DateType.TIME_ONLY,\n          },\n        ],\n      },\n      {\n        controls: [\n          {\n            type: FormControlType.INPUT,\n            label: 'Ranged',\n            propertyPath: 'rangeDate',\n            inputType: InputType.DATE,\n            dateType: DateType.DATE_ONLY,\n            earliestDate: new Date(),\n            latestDate: addDays(new Date(), 20),\n            isRanged: true,\n            description: 'With earliest and latest date',\n          },\n          {\n            type: FormControlType.INPUT,\n            label: 'Ranged time',\n            propertyPath: 'rangedTime',\n            inputType: InputType.DATE,\n            dateType: DateType.TIME_ONLY,\n            description: 'With earliest and latest time',\n            earliestTime: (() => {\n              const x = new Date()\n              x.setHours(8)\n              return x\n            })(),\n            latestTime: (() => {\n              const x = new Date()\n              x.setHours(17)\n              return x\n            })(),\n          },\n        ],\n      },\n      {\n        width: ControlRowWidth.MEDIUM,\n        controls: [\n          {\n            type: FormControlType.INPUT,\n            label: 'Formatted',\n            propertyPath: 'rangeDate',\n            inputType: InputType.DATE,\n            dateType: DateType.DATE_AND_TIME,\n            dateFormat: 'QQQQ',\n            timeFormat: 'H O',\n            locale: 'es',\n            description: 'Date format, time format, and locale',\n          },\n        ],\n      },\n    ],\n  },\n]\n","import { Form, ValidationMode } from '@nokacreative/generic-react-form'\n\nimport { SamplePage } from '../../common/samplePage'\nimport { config, emptyModel } from './data'\nimport { TestModel } from './model'\n\nexport const InputsSample = () => (\n  <SamplePage\n    headerText=\"Input\"\n    description=\"All available input types and their configurations.\"\n    renderForm={(\n      onSubmit: (data: TestModel) => void,\n      submittedData: TestModel | undefined\n    ) => (\n      <Form\n        sections={config}\n        defaultValues={submittedData || emptyModel}\n        validationMode={ValidationMode.BLUR | ValidationMode.SUBMIT}\n        onSubmit={onSubmit}\n        submitButtonText=\"OK\"\n        isReadOnly={submittedData !== undefined}\n      />\n    )}\n  />\n)\n","import {\n  FormSectionConfig,\n  FormControlType,\n  ControlRowWidth,\n  RadioLayout,\n  RadioSelection,\n} from '@nokacreative/generic-react-form'\nimport { TestModel } from './model'\n\nexport const emptyModel: TestModel = {\n  r1: '',\n  r2: '',\n  c1: [],\n  c2: [],\n  c3: [],\n  c4: [],\n  c5: [],\n  c6: [],\n}\n\nfunction generateSelections(numSelections: number): RadioSelection[] {\n  return Array.from({ length: numSelections }).map((_, i) => ({\n    value: `v${i}`,\n    text: `Value ${i + 1}`,\n  }))\n}\n\nexport const config: FormSectionConfig<TestModel>[] = [\n  {\n    headerText: 'Radios and H/V Layouts',\n    controlRows: [\n      {\n        controls: [\n          {\n            type: FormControlType.RADIO_GROUP,\n            label: 'Horizontal Layout (default)',\n            propertyPath: 'r1',\n            selections: generateSelections(3),\n          },\n          {\n            type: FormControlType.RADIO_GROUP,\n            label: 'Vertical Layout',\n            propertyPath: 'r2',\n            selections: generateSelections(3),\n            layout: RadioLayout.VERTICAL,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    headerText: 'Checkboxes and Grid Layout',\n    controlRows: [\n      {\n        width: ControlRowWidth.MEDIUM,\n        controls: [\n          {\n            type: FormControlType.CHECKBOX_GROUP,\n            label: '2 columns',\n            propertyPath: 'c1',\n            selections: generateSelections(4),\n            layout: RadioLayout.GRID,\n            numGridColumns: 2,\n          },\n        ],\n      },\n      {\n        width: ControlRowWidth.MEDIUM_LARGE,\n        controls: [\n          {\n            type: FormControlType.CHECKBOX_GROUP,\n            label: '3 columns (default)',\n            propertyPath: 'c2',\n            selections: generateSelections(6),\n            layout: RadioLayout.GRID,\n            numGridColumns: 3,\n          },\n        ],\n      },\n      {\n        controls: [\n          {\n            type: FormControlType.CHECKBOX_GROUP,\n            label: '4 columns',\n            propertyPath: 'c3',\n            selections: generateSelections(8),\n            layout: RadioLayout.GRID,\n            numGridColumns: 4,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    headerText: 'Checkboxes-exclusive validators',\n    controlRows: [\n      {\n        controls: [\n          {\n            type: FormControlType.CHECKBOX_GROUP,\n            label: 'Min selections',\n            propertyPath: 'c4',\n            isRequired: true,\n            selections: generateSelections(4),\n            minNumSelections: 2,\n          },\n          {\n            type: FormControlType.CHECKBOX_GROUP,\n            label: 'Max selections',\n            propertyPath: 'c5',\n            selections: generateSelections(4),\n            maxNumSelections: 2,\n          },\n        ],\n      },\n      {\n        controls: [\n          {\n            type: FormControlType.CHECKBOX_GROUP,\n            label: 'Min and Max',\n            propertyPath: 'c6',\n            isRequired: true,\n            selections: generateSelections(6),\n            minNumSelections: 2,\n            maxNumSelections: 4,\n          },\n        ],\n      },\n    ],\n  },\n]\n","import { Form, ValidationMode } from '@nokacreative/generic-react-form'\nimport { SamplePage } from '../../common/samplePage'\nimport { config, emptyModel } from './data'\nimport { TestModel } from './model'\n\nexport const RadioCheckboxSample = () => (\n  <SamplePage\n    headerText=\"Radios And Checkboxes\"\n    description={\n      <>\n        <p>\n          Both radios and checkboxes allow for a horizontal, vertical, or grid layout.\n          When using a grid, the number of columns can be specified to be 2, 3, or 4.\n          <br />\n          <span className=\"footnote\">\n            Note: If viewing on mobile or small screen widths, the grids will\n            automatically resize to a column count that best suits the current available\n            space.\n          </span>\n        </p>\n        <p>\n          Checkboxes have additional properties to specify the minimum and/or maximum\n          number of selections required. If either is specified, an overridable\n          description is automatically applied to the control. Note that a required\n          checkbox with no minimum specified implies that at least one selection is\n          required.\n        </p>\n      </>\n    }\n    renderForm={(\n      onSubmit: (data: TestModel) => void,\n      submittedData: TestModel | undefined\n    ) => (\n      <Form\n        sections={config}\n        defaultValues={submittedData || emptyModel}\n        validationMode={ValidationMode.BLUR | ValidationMode.SUBMIT}\n        onSubmit={onSubmit}\n        submitButtonText=\"OK\"\n        isReadOnly={submittedData !== undefined}\n      />\n    )}\n  />\n)\n","import { FormSectionConfig, FormControlType } from '@nokacreative/generic-react-form'\nimport { TestModel } from './model'\n\nexport const emptyModel: TestModel = {\n  limit: '',\n  resize1: '',\n  resize2: '',\n  resize3: '',\n  md: '',\n  md2: '',\n}\n\nexport const config: FormSectionConfig<TestModel>[] = [\n  {\n    headerText: '',\n    controlRows: [\n      {\n        controls: [\n          {\n            type: FormControlType.TEXTAREA,\n            label: 'Character limit',\n            propertyPath: 'limit',\n            characterLimit: 10,\n          },\n          {\n            type: FormControlType.TEXTAREA,\n            label: 'Vertical Resize',\n            propertyPath: 'resize1',\n            allowVerticalResize: true,\n          },\n        ],\n      },\n      {\n        controls: [\n          {\n            type: FormControlType.TEXTAREA,\n            label: 'Horizontal Resize',\n            propertyPath: 'resize2',\n            allowHorizontalResize: true,\n          },\n          {\n            type: FormControlType.TEXTAREA,\n            label: 'Both Directions Resize',\n            propertyPath: 'resize3',\n            allowVerticalResize: true,\n            allowHorizontalResize: true,\n          },\n        ],\n      },\n      {\n        controls: [\n          {\n            type: FormControlType.TEXTAREA,\n            label: 'Rich',\n            propertyPath: 'md',\n            useMarkdown: true,\n          },\n          {\n            type: FormControlType.TEXTAREA,\n            label: 'Rich (with image uploader)',\n            propertyPath: 'md2',\n            useMarkdown: true,\n            allowImageUpload: true,\n          },\n        ],\n      },\n    ],\n  },\n]\n","import { Form, ValidationMode } from '@nokacreative/generic-react-form'\nimport { SamplePage } from '../../common/samplePage'\nimport { config, emptyModel } from './data'\nimport { TestModel } from './model'\n\nexport const TextareaSample = () => (\n  <SamplePage\n    headerText=\"Textareas\"\n    description={\n      <>\n        <p>\n          Textareas can be configured to have a character limit and resize directions. A\n          character limit stops the user from being able to type past the specified amount\n          of characters, as opposed to causing a validation error.\n        </p>\n        <p>\n          A rich textarea supporting markdown can also be created by simply adding{' '}\n          <em>useMarkdown: true</em> to the configuration. For images, a full-fledge image\n          uploader can be used by specifying <em>allowImageUpload: true</em>. A previewer\n          is added below rich textareas and is updated in realtime.\n        </p>\n        <p>\n          <span className=\"footnote\">\n            Note: a read-only version of rich textareas currently just render the exact\n            text content instead of the preview. A <em>MarkdownRenderer</em> is available\n            to render out rich contents.\n          </span>\n        </p>\n      </>\n    }\n    renderForm={(\n      onSubmit: (data: TestModel) => void,\n      submittedData: TestModel | undefined\n    ) => (\n      <Form\n        sections={config}\n        defaultValues={submittedData || emptyModel}\n        validationMode={ValidationMode.BLUR | ValidationMode.SUBMIT}\n        onSubmit={onSubmit}\n        submitButtonText=\"OK\"\n        isReadOnly={submittedData !== undefined}\n      />\n    )}\n  />\n)\n","import {\n  FormSectionConfig,\n  FormControlType,\n  ControlRowWidth,\n  DropdownOption,\n} from '@nokacreative/generic-react-form'\nimport { TestModel } from './model'\n\nexport const emptyModel: TestModel = {\n  basic: '',\n  pinned: '',\n  multi: [],\n  multiClear: [],\n  noFiltering: '',\n  emptyText: '',\n  ecn: '',\n}\n\nconst options: DropdownOption[] = [\n  { value: 'a', text: 'Option A' },\n  { value: 'b', text: 'Option B' },\n  { value: 'c', text: 'Option C' },\n  { value: 'd', text: 'Option D' },\n  { value: 'e', text: 'Option E' },\n  { value: 'f', text: 'Option F' },\n  { value: 'g', text: 'Option G' },\n]\n\nexport const config = (isSubmitted: boolean): FormSectionConfig<TestModel>[] => [\n  {\n    headerText: 'Common',\n    controlRows: [\n      {\n        controls: [\n          {\n            type: FormControlType.DROPDOWN,\n            label: 'Basic',\n            propertyPath: 'basic',\n            options,\n            placeholder: 'Optional placeholder',\n          },\n          {\n            type: FormControlType.DROPDOWN,\n            label: 'With Pinned values',\n            propertyPath: 'pinned',\n            options,\n            pinnedValues: ['c', 'd'],\n            placeholder: 'Select...',\n          },\n        ],\n      },\n      {\n        controls: [\n          {\n            type: FormControlType.DROPDOWN,\n            label: 'Multiple',\n            propertyPath: 'multi',\n            options,\n            placeholder: 'Select multiple...',\n            isMultiple: true,\n          },\n          {\n            type: FormControlType.DROPDOWN,\n            label: 'Multiple with Clear Button',\n            propertyPath: 'multi',\n            options,\n            placeholder: 'Select multiple...',\n            isMultiple: true,\n            showClearButton: true,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    headerText: 'Special',\n    controlRows: [\n      {\n        controls: [\n          {\n            type: FormControlType.DROPDOWN,\n            label: 'No Filtering',\n            propertyPath: 'noFiltering',\n            description: 'Good for menu items',\n            options: [\n              { value: 'print', text: 'Print' },\n              { value: 'help', text: 'Help' },\n            ],\n            allowFiltering: false,\n            placeholder: 'Menu',\n          },\n          {\n            type: FormControlType.DROPDOWN,\n            label: 'No Filtering + no save',\n            propertyPath: '',\n            description: (\n              <>\n                The value is not saved to the form&apos;s data, and not persisted as a\n                selection. There is also an <code>onOptionSelected</code> callback here.\n              </>\n            ),\n            options: [\n              { value: 'print', text: 'Print' },\n              { value: 'help', text: 'Help' },\n            ],\n            allowFiltering: false,\n            saveSelection: false,\n            placeholder: 'Menu',\n            onOptionSelected: (option: DropdownOption | undefined) => {\n              if (option?.value === 'print') {\n                alert('Printing!')\n              } else if (option?.value === 'help') {\n                alert('This is a help modal')\n              }\n            },\n          },\n        ],\n      },\n      {\n        controls: [\n          {\n            type: FormControlType.DROPDOWN,\n            label: 'Empty Options text',\n            propertyPath: '',\n            options,\n            placeholder: \"Type 'asdf'\",\n            emptyOptionsText: 'Nothing here!!!',\n            description: 'Used when there are no filter results',\n          },\n          {\n            type: FormControlType.DROPDOWN,\n            label: 'Extra class name',\n            propertyPath: '',\n            options,\n            description: 'For extra styling',\n            placeholder: 'This is a placeholder',\n            extraClassName: 'test',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    headerText: 'Callbacks',\n    onInfoIconClicked: () => alert('This section will be hidden on submit.'),\n    isHidden: isSubmitted,\n    controlRows: [\n      {\n        width: ControlRowWidth.MEDIUM,\n        controls: [\n          {\n            type: FormControlType.DROPDOWN,\n            label: 'Open and Close',\n            propertyPath: '',\n            options,\n            onOpen: () => alert('Opened'),\n            onClose: () => alert('Closed'),\n          },\n        ],\n      },\n      {\n        controls: [\n          {\n            type: FormControlType.DROPDOWN,\n            label: 'Single Option Selected',\n            propertyPath: 'emptyText',\n            options,\n            showClearButton: true,\n            onOptionSelected: (option: DropdownOption | undefined) =>\n              option\n                ? alert(`You selected ${option.text}`)\n                : alert('You cleared the selection'),\n          },\n          {\n            type: FormControlType.DROPDOWN,\n            label: 'Options Chanaged',\n            propertyPath: 'ecn',\n            options,\n            showClearButton: true,\n            isMultiple: true,\n            onOptionsChanged: (options: DropdownOption[] | undefined) =>\n              options\n                ? alert(`You selected ${options.length} option(s)`)\n                : alert('You cleared all selections'),\n          },\n        ],\n      },\n    ],\n  },\n]\n","import { Form, ValidationMode } from '@nokacreative/generic-react-form'\nimport './styles.scss'\n\nimport { SamplePage } from '../../common/samplePage'\nimport { config, emptyModel } from './data'\nimport { TestModel } from './model'\n\nexport const DropdownSample = () => (\n  <SamplePage\n    headerText=\"Dropdowns\"\n    description=\"Dropdowns have many available configurations, though the most basic one only requires a list of options. They are filterable by default.\"\n    renderForm={(\n      onSubmit: (data: TestModel) => void,\n      submittedData: TestModel | undefined\n    ) => (\n      <Form\n        sections={config(submittedData !== undefined)}\n        defaultValues={submittedData || emptyModel}\n        validationMode={ValidationMode.BLUR | ValidationMode.SUBMIT}\n        onSubmit={onSubmit}\n        submitButtonText=\"OK\"\n        isReadOnly={submittedData !== undefined}\n      />\n    )}\n  />\n)\n","import { faUpload } from '@fortawesome/free-solid-svg-icons'\nimport {\n  FormSectionConfig,\n  FormControlType,\n  FileUploadStatus,\n} from '@nokacreative/generic-react-form'\nimport { TestModel } from './model'\n\nexport const emptyModel: TestModel = {\n  multi: [],\n}\n\nconst onUpload = (files: File[]) => alert(`You have uploaded ${files.length} file(s).`)\nconst onRemove = (filename: string) => alert(`You have removed ${filename}.`)\n\nexport const config = (\n  clientUpload: (files: File[]) => void,\n  clientRemove: (filename: string, index: number) => void,\n  fileUploadProgress: { [filename: string]: number },\n  fileStatuses: { [filename: string]: FileUploadStatus }\n): FormSectionConfig<TestModel>[] => [\n  {\n    headerText: 'Common',\n    controlRows: [\n      {\n        controls: [\n          {\n            type: FormControlType.ATTACHMENT,\n            label: 'Basic',\n            propertyPath: 'basic',\n            description:\n              'In this section, the callbacks do nothing except for show alerts',\n            onUpload,\n            onRemove,\n          },\n\n          {\n            type: FormControlType.ATTACHMENT,\n            label: 'Supported Extensions',\n            propertyPath: 'ext',\n            description: 'Whitelists extensions to allow.',\n            onUpload,\n            onRemove,\n            supportedFileExtensions: ['.jpg', '.txt'],\n          },\n        ],\n      },\n      {\n        controls: [\n          {\n            type: FormControlType.ATTACHMENT,\n            label: 'Multiple',\n            propertyPath: 'multi',\n            description: 'Can select multiple in the file browser, and add to the list',\n            onUpload,\n            onRemove,\n            isMultiple: true,\n          },\n\n          {\n            type: FormControlType.ATTACHMENT,\n            label: 'Upload Icon',\n            propertyPath: 'icon',\n            description: 'Any FontAwesome icon',\n            onUpload,\n            onRemove,\n            uploadIcon: faUpload,\n          },\n        ],\n      },\n    ],\n  },\n\n  {\n    headerText: 'Functionality',\n    controlRows: [\n      {\n        controls: [\n          {\n            type: FormControlType.ATTACHMENT,\n            label: 'Validation',\n            propertyPath: 'fsl',\n            description: 'File size limits (individual and/or total) can be specified.',\n            onUpload,\n            onRemove,\n            individualFileSizeLimit: 2500,\n            totalFileSizeLimit: 5000,\n          },\n        ],\n      },\n      {\n        controls: [\n          {\n            type: FormControlType.ATTACHMENT,\n            label: 'Progress and Statuses',\n            propertyPath: 'client',\n            description:\n              \"This fake client will fail to upload files named 'test' for the first time.\",\n            onUpload: clientUpload,\n            onRemove: clientRemove,\n            fileUploadProgress,\n            fileStatuses,\n          },\n        ],\n      },\n    ],\n  },\n]\n","import { Form, ValidationMode } from '@nokacreative/generic-react-form'\nimport { SamplePage } from '../../common/samplePage'\nimport { useFakeClient } from '../basic/fakeClient'\nimport { config, emptyModel } from './data'\nimport { TestModel } from './model'\n\nexport const AttachmentSample = () => {\n  const { upload, remove, fileStatuses, progress } = useFakeClient()\n  return (\n    <SamplePage\n      headerText=\"Attachment Controls\"\n      description={\n        <>\n          <p>\n            Otherwise known as <b>File Uploaders</b>. They support many optional\n            configurations, with the basic one only requiring a callback for{' '}\n            <em>onUpload()</em> and <em>onRemove()</em>.\n          </p>\n          <p>\n            Instructional messages such as whether or not multiple files can be selected,\n            and what the supported file formats are, are automatically added. They can\n            also all be overriden.\n          </p>\n        </>\n      }\n      renderForm={(\n        onSubmit: (data: TestModel) => void,\n        submittedData: TestModel | undefined\n      ) => (\n        <Form\n          sections={config(upload, remove, progress, fileStatuses)}\n          defaultValues={submittedData || emptyModel}\n          validationMode={ValidationMode.BLUR | ValidationMode.SUBMIT}\n          onSubmit={onSubmit}\n          submitButtonText=\"OK\"\n          isReadOnly={submittedData !== undefined}\n        />\n      )}\n    />\n  )\n}\n","import React from 'react'\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom'\n\nimport '@nokacreative/generic-react-form/dist/index.css'\nimport './styles.scss'\n\nimport { ROUTES } from '../assets/routes'\nimport { Basic } from '../pages/basic'\nimport { ArraySample } from '../pages/array'\nimport { StandaloneSample } from '../pages/standalone'\nimport { ConditionalSample } from '../pages/condition'\nimport { InputsSample } from '../pages/inputs'\nimport { RadioCheckboxSample } from '../pages/radioCheckbox'\nimport { TextareaSample } from '../pages/textarea'\nimport { DropdownSample } from '../pages/dropdown'\nimport { AttachmentSample } from '../pages/attachment'\n\nexport const Entry = () => (\n  <Router basename=\"/\">\n    <div id=\"links\">\n      <p>Select the sample you would like to view:</p>\n      <Link to={ROUTES.basic}>Overview</Link>\n      <Link to={ROUTES.array}>Arrays</Link>\n      <Link to={ROUTES.inputs}>Inputs</Link>\n      <Link to={ROUTES.radioCheckbox}>Radios And Checkboxes</Link>\n      <Link to={ROUTES.textareas}>Textareas</Link>\n      <Link to={ROUTES.dropdowns}>Dropdowns</Link>\n      <Link to={ROUTES.attachments}>Attachment Controls</Link>\n      <Link to={ROUTES.conditional}>Conditional Configurations</Link>\n      <Link to={ROUTES.standalone}>Standalone Controls</Link>\n    </div>\n    <main>\n      <Switch>\n        <Route path={ROUTES.basic} component={Basic} />\n        <Route path={ROUTES.array} component={ArraySample} />\n        <Route path={ROUTES.inputs} component={InputsSample} />\n        <Route path={ROUTES.radioCheckbox} component={RadioCheckboxSample} />\n        <Route path={ROUTES.textareas} component={TextareaSample} />\n        <Route path={ROUTES.dropdowns} component={DropdownSample} />\n        <Route path={ROUTES.attachments} component={AttachmentSample} />\n        <Route path={ROUTES.conditional} component={ConditionalSample} />\n        <Route path={ROUTES.standalone} component={StandaloneSample} />\n      </Switch>\n    </main>\n  </Router>\n)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport reportWebVitals from './reportWebVitals'\nimport { Entry } from './entry'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Entry />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}